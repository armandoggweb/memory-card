{"version":3,"sources":["components/Scoreboard.js","components/card.js","components/cards.js","App.js","index.js"],"names":["ScoreBoard","props","maxScore","score","record","Card","id","url","className","src","alt","Cards","max","cardsId","useState","cards","setCards","useEffect","a","fetch","process","mode","response","json","imgsData","cardsFetched","data","slice","map","img","images","downsized","console","log","rndCards","nCards","rndNumbers","rndNumber","i","Math","floor","random","includes","push","Loader","App","setCardsId","selected","setSelected","setScore","setRecord","setRndCards","newCards","selectedUpdated","undefined","this","concat","every","card","content","handleClick","cardId","parseInt","resetGame","scoreUpdated","removeEventListener","cardsE","bind","win","document","querySelectorAll","forEach","addEventListener","elements","loader","getElementById","querySelector","classList","add","Promise","resolve","setTimeout","remove","ReactDOM","render"],"mappings":"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","file":"static/js/main.3fa180be.chunk.js","sourcesContent":["import React from 'react'\nimport './scoreboard.css'\nconst ScoreBoard = (props) =>{\n  const {maxScore, score, record} = props\n  return(\n    <ul>\n      <li>Max Score: {maxScore}</li>\n      <li>Score: {score}</li>\n      <li>Record: {record}</li>\n    </ul>\n  )\n}\n\nexport default ScoreBoard","import React from 'react'\nimport './card.css'\n\nconst Card = (props) => {\n  const { id, url } = props\n  return (\n    <>\n      <img id={id} className=\"card\" src={url} alt=\"theOffice\" />\n    </>\n  )\n}\n\nexport default Card\n","import React, { useState, useEffect } from \"react\"\nimport './cards.css'\nimport Card from './card'\nconst Cards = (props) => {\n  const { max, cardsId } = props;\n  const [cards, setCards] = useState([])\n  useEffect(() => {\n    (async function () {\n      try {\n        const response = await fetch(\n          `https://api.giphy.com/v1/gifs/search?api_key=${process.env.REACT_APP_GIPHY_API_KEY}=dwight%20schrute`,\n          { mode: 'cors' })\n        const imgsData = await response.json()\n        const cardsFetched = imgsData.data.slice(0, max + 1)\n        setCards(cardsFetched.map((img) => img.images.downsized.url))\n\n      } catch (e) {\n        console.log(e)\n      }\n    })()\n\n  }, [])\n\n  return (\n    <div className=\"cards\">\n      {cardsId.map((id) => <Card key={id} id={id} url={cards[id]} />)}\n    </div>\n  )\n}\n\nexport default Cards","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport ScoreBoard from './components/Scoreboard'\nimport Cards from './components/cards'\n\nconst App = () => {\n  const maxScore = 10\n  const nCardsRow = 3\n  const [cardsId, setCardsId] = useState(rndCards(maxScore, nCardsRow))\n  const [selected, setSelected] = useState([])\n  const [score, setScore] = useState(0)\n  const [record, setRecord] = useState(0)\n\n  useEffect(() => {\n\n    function setRndCards() {\n      let newCards = []\n      const selectedUpdated = this !== undefined ? selected.concat(this) : selected\n      do {\n        newCards = rndCards(maxScore, nCardsRow)\n      } while (newCards.every((card) => selectedUpdated.includes(card.content)))\n      setCardsId(newCards)\n    }\n\n    function handleClick() {\n      const cardId = parseInt(this.id)\n      if (selected.includes(cardId)) {\n        resetGame()\n      } else {\n        const scoreUpdated = score + 1\n        if (scoreUpdated === maxScore) {\n          removeEventListener(cardsE)\n          resetGame(true)\n        } else {\n          setSelected(selected.concat(cardId))\n          setScore(scoreUpdated)\n          setRndCards.bind(cardId)()\n        }\n      }\n    }\n\n    function resetGame(win = false) {\n      setSelected([])\n      if (win) {\n        const scoreUpdated = score + 1\n        if (scoreUpdated > record) setRecord(scoreUpdated)\n      } else {\n        if (score > record) setRecord(score)\n      }\n      setScore(0)\n      setRndCards()\n    }\n\n    const cardsE = document.querySelectorAll('.card')\n    cardsE.forEach((card) => {\n      card.addEventListener('click', handleClick)\n    })\n    const removeEventListener = (elements) => {\n      elements.forEach((card) => {\n        card.removeEventListener('click', handleClick)\n      })\n    }\n    return () => removeEventListener(cardsE)\n\n  });\n\n  useEffect(() => {\n    (async () => {\n      const loader = document.getElementById('loader')\n      const cardsE = document.querySelector('.cards')\n      cardsE.classList.add('hide')\n      loader.className = ''\n      await new Promise(function (resolve) {\n        setTimeout(function () { resolve(); }, 300);\n      })\n      loader.className = 'hide'\n      cardsE.classList.remove('hide')\n    })()\n  })\n\n  return (\n    <>\n      <ScoreBoard maxScore={maxScore} score={score} record={record} />\n      <Loader />\n      <Cards max={maxScore} cardsId={cardsId}/>\n    </>\n  )\n}\n\nconst rndCards = (max, nCards) => {\n  let rndNumbers = []\n  let rndNumber = 0\n  for (let i = 0; i < nCards; i++) {\n    do {\n      rndNumber = Math.floor((Math.random() * max) + 1)\n    } while (rndNumbers.includes(rndNumber))\n    rndNumbers.push(rndNumber)\n  }\n  return rndNumbers\n}\nconst Loader = () => {\n  return <div id=\"loader\" className=\"hide\"></div>\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}